# -*- coding: utf-8 -*-
"""Weather code for meteo

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18lUGx5nSzTAIlgItfgSBiWiQMScN_vs6
"""

!pip install openmeteo-requests
!pip install requests-cache retry-requests numpy pandas

import openmeteo_requests
import requests_cache
import pandas as pd
import numpy as np
from retry_requests import retry

cache_session = requests_cache.CachedSession('.cache', expire_after=-1)
retry_session = retry(cache_session, retries=5, backoff_factor=0.2)
openmeteo = openmeteo_requests.Client(session=retry_session)


url = "https://archive-api.open-meteo.com/v1/archive"
params = {
    "latitude": [55.0566, 47.2701, 51.2673, 51.0555],
    "longitude": [8.415, 10.1739, 15.0416, 5.8663],
    "start_date": "2015-01-01",
    "end_date": "2024-04-02",
    "hourly": ["temperature_2m", "cloud_cover", "wind_speed_10m"],
    "daily": "daylight_duration",
    "timezone": "Europe/Berlin"
}
responses = openmeteo.weather_api(url, params=params)

weights = np.array([0.25, 0.25, 0.25, 0.25])

weighted_temperature_2m_sum = None
weighted_cloud_cover_sum = None
weighted_wind_speed_10m_sum = None

for i, response in enumerate(responses):
    hourly = response.Hourly()
    hourly_temperature_2m = hourly.Variables(0).ValuesAsNumpy()
    hourly_cloud_cover = hourly.Variables(1).ValuesAsNumpy()
    hourly_wind_speed_10m = hourly.Variables(2).ValuesAsNumpy()

    if weighted_temperature_2m_sum is None:
        weighted_temperature_2m_sum = weights[i] * hourly_temperature_2m
        weighted_cloud_cover_sum = weights[i] * hourly_cloud_cover
        weighted_wind_speed_10m_sum = weights[i] * hourly_wind_speed_10m
    else:
        weighted_temperature_2m_sum += weights[i] * hourly_temperature_2m
        weighted_cloud_cover_sum += weights[i] * hourly_cloud_cover
        weighted_wind_speed_10m_sum += weights[i] * hourly_wind_speed_10m

hourly = responses[0].Hourly()
combined_hourly_data = {"date": pd.date_range(
    start=pd.to_datetime(hourly.Time(), unit="s", utc=True),
    end=pd.to_datetime(hourly.TimeEnd(), unit="s", utc=True),
    freq=pd.Timedelta(seconds=hourly.Interval()),
    inclusive="left"
)}
combined_hourly_data["temperature_2m"] = weighted_temperature_2m_sum
combined_hourly_data["cloud_cover"] = weighted_cloud_cover_sum
combined_hourly_data["wind_speed_10m"] = weighted_wind_speed_10m_sum

combined_hourly_dataframe = pd.DataFrame(data=combined_hourly_data)

combined_csv_filename = "combined_weighted_hourly_data.csv"
combined_hourly_dataframe.to_csv(combined_csv_filename, index=False)
print(f"Saved {combined_csv_filename}")

import openmeteo_requests
import requests_cache
import pandas as pd
import numpy as np
from retry_requests import retry

cache_session = requests_cache.CachedSession('.cache', expire_after=-1)
retry_session = retry(cache_session, retries=5, backoff_factor=0.2)
openmeteo = openmeteo_requests.Client(session=retry_session)

coords = {
    "Berlin": (52.5200, 13.4050),
    "Hamburg": (53.5511, 9.9937),
    "Munich": (48.1351, 11.5820),
    "Cologne": (50.9375, 6.9603)
}

weights = {
    "Berlin": 0.457,
    "Hamburg": 0.222,
    "Munich": 0.185,
    "Cologne": 0.136
}

latitudes = [coords[city][0] for city in coords]
longitudes = [coords[city][1] for city in coords]


url = "https://archive-api.open-meteo.com/v1/archive"
params = {
    "latitude": latitudes,
    "longitude": longitudes,
    "start_date": "2015-01-01",
    "end_date": "2024-04-02",
    "hourly": ["temperature_2m", "cloud_cover", "wind_speed_10m"],
    "daily": "daylight_duration",
    "timezone": "Europe/Berlin"
}
responses = openmeteo.weather_api(url, params=params)

weighted_temperature_2m_sum = None
weighted_cloud_cover_sum = None
weighted_wind_speed_10m_sum = None

for i, city in enumerate(coords):
    response = responses[i]
    hourly = response.Hourly()
    hourly_temperature_2m = hourly.Variables(0).ValuesAsNumpy()
    hourly_cloud_cover = hourly.Variables(1).ValuesAsNumpy()
    hourly_wind_speed_10m = hourly.Variables(2).ValuesAsNumpy()

    weight = weights[city]

    if weighted_temperature_2m_sum is None:
        weighted_temperature_2m_sum = weight * hourly_temperature_2m
        weighted_cloud_cover_sum = weight * hourly_cloud_cover
        weighted_wind_speed_10m_sum = weight * hourly_wind_speed_10m
    else:
        weighted_temperature_2m_sum += weight * hourly_temperature_2m
        weighted_cloud_cover_sum += weight * hourly_cloud_cover
        weighted_wind_speed_10m_sum += weight * hourly_wind_speed_10m

hourly = responses[0].Hourly()
combined_hourly_data = {"date": pd.date_range(
    start=pd.to_datetime(hourly.Time(), unit="s", utc=True),
    end=pd.to_datetime(hourly.TimeEnd(), unit="s", utc=True),
    freq=pd.Timedelta(seconds=hourly.Interval()),
    inclusive="left"
)}
combined_hourly_data["temperature_2m"] = weighted_temperature_2m_sum
combined_hourly_data["cloud_cover"] = weighted_cloud_cover_sum
combined_hourly_data["wind_speed_10m"] = weighted_wind_speed_10m_sum

combined_hourly_dataframe = pd.DataFrame(data=combined_hourly_data)

combined_csv_filename = "combined_population_weighted_hourly_data.csv"
combined_hourly_dataframe.to_csv(combined_csv_filename, index=False)
print(f"Saved {combined_csv_filename}")